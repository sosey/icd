{"name":"Icd","tagline":"ICD - Interface Control Document Management","body":"ICD - Interface Control Document Management\r\n===========================================\r\n\r\nThis project contains support for validating, storing, managing, \r\nsearching and viewing APIs and ICDs (Interface Control Documents between TMT subsystems).\r\nAn ICD consists of source and target subsystem APIs.\r\nThe validation is based on [JSON Schema](http://json-schema.org/),\r\nhowever the schema descriptions as well as the ICDs themselves may also be written in\r\nthe simpler [HOCON](https://github.com/typesafehub/config/blob/master/HOCON.md) format.\r\n\r\nICDs are stored in a MongoDB database, which also keeps track of any changes made.\r\nTwo command line applications ([icd](https://github.com/tmtsoftware/icd/blob/master/icd/README.md) and [icd-db](https://github.com/tmtsoftware/icd/blob/master/icd-db/README.md)) and a web app ([icd-web](https://github.com/tmtsoftware/icd/blob/master/icd-web/README.md)) \r\nare provided for ingesting the ICDs from files, querying and viewing the data.\r\n\r\nThe applications here assume the MongoDB database is running. \r\nTo start the MongoDB server, you can run a command like this:\r\n\r\n    mongod -dbpath $db\r\n    \r\nwhere $db is the directory containing the database.\r\n\r\nThe default database name used is `icds` and can be configured in icd-db/src/main/resources/reference.conf\r\n(or in <installDir>/conf/reference.conf).\r\n\r\n\r\nICD Subprojects\r\n---------------\r\n\r\nThere are currently these ICD subprojects:\r\n\r\n* icd - supports validating an API against the JSON schema as well as saving it as a Markdown, HTML or PDF document\r\n* icd-db - supports ingesting API files into a MongoDB database, querying the db and saving an API or ICD as a document\r\n* icd-web/* - a Play/Scala.js based web app for working with ICDs\r\n\r\nBuild and Install\r\n-----------------\r\n\r\nAn install.sh script is provided that builds and installs all of the subprojects into the ../install_icd directory.\r\nThis is basically just the command `sbt stage` in each project followed by copying the products to the\r\ninstall directory. A binary is installed for each subproject, with the same name as the subproject\r\n(except for icd-web, where the binary produced is `icdwebserver`).\r\n\r\nFor the two command line apps (icd and icd-db), type `icd --help` or `icd-db --help` for a list of the \r\ncommand line options.\r\n\r\nThe icdwebserver application starts the web app (by default on localhost:9000).\r\n\r\nNote that the build is set up so that the Play subproject is selected on start.\r\nSo to run any commands (like sbt clean or sbt stage) that should apply to the other projects,\r\nyou need to first switch to that project or the root project. For example `sbt clean \"project root\" clean`. \r\n\r\nPlay Project icd-web\r\n--------------------\r\n\r\nTo test the web server, run `sbt run` from this directory.\r\nThen go to http://localhost:9000 in a web browser.\r\n\r\nSee [icd-web/README.md](https://github.com/tmtsoftware/icd/blob/master/icd-web/README.md) for more information.\r\n\r\nDocker Install\r\n--------------\r\n\r\nTwo Docker related scripts are provided in the top level directory.\r\n\r\n* docker-build.sh - Runs `sbt docker:stage` and `docker build` to build the docker image\r\n\r\n* docker-run.sh - Can be used to run the ICD web server inside Docker\r\n\r\n__Note__ that *both* scripts should be edited to add the correct docker user.\r\nSee comments in the scripts for more information.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}